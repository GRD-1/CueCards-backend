generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique @db.VarChar(100)
  nickname     String?      @db.VarChar
  avatar       String?      @db.VarChar
  password     String       @db.VarChar
  createdAt    DateTime     @default(now()) @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark   Boolean      @default(false)
  cards        Card[]       @relation("AuthorRelation")
  dictionaries Dictionary[] @relation("AuthorRelation")
  tags         Tag[]        @relation("AuthorRelation")

  @@map("users")
}

model Language {
  id         Int      @id() @default(autoincrement())
  name       String   @unique @db.VarChar
  acronym    String   @unique @db.VarChar
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark Boolean  @default(false)
  fsCards    Card[]   @relation("FsLanguageRelation")
  bsCards    Card[]   @relation("BsLanguageRelation")

  @@map("languages")
}

model Card {
  id                Int       @id @default(autoincrement())
  authorId          Int?
  fsLanguage        String
  fsValue           String    @unique @db.VarChar
  fsDescription     String?   @default("") @db.VarChar
  fsMeaningVariants String[]
  fsWrongMeanings   String[]
  fsTranscription   String?   @db.VarChar
  fsSynonyms        String[]
  fsAudio           String?   @db.VarChar
  fsHint            String?   @db.VarChar
  bsLanguage        String
  bsValue           String    @unique @db.VarChar
  bsDescription     String?   @default("") @db.VarChar
  bsMeaningVariants String[]
  bsWrongMeanings   String[]
  bsTranscription   String?   @db.VarChar
  bsSynonyms        String[]
  bsAudio           String?   @db.VarChar
  bsHint            String?   @db.VarChar
  createdAt         DateTime  @default(now()) @db.Timestamp(6)
  updatedAt         DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark        Boolean   @default(false)
  users             User?     @relation("AuthorRelation", fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fsLang            Language? @relation("FsLanguageRelation", fields: [fsLanguage], references: [acronym])
  bsLang            Language? @relation("BsLanguageRelation", fields: [bsLanguage], references: [acronym])
  tags              CardTag[]

  @@map("cards")
}

model Dictionary {
  id         Int             @id() @default(autoincrement())
  authorId   Int?
  name       String          @unique @db.VarChar
  createdAt  DateTime        @default(now()) @db.Timestamp(6)
  updatedAt  DateTime        @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark Boolean         @default(false)
  users      User?           @relation("AuthorRelation", fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags       DictionaryTag[]

  @@map("dictionaries")
}

model Tag {
  id            Int             @id @default(autoincrement())
  authorId      Int?
  name          String          @unique @db.VarChar
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark    Boolean         @default(false)
  users         User?           @relation("AuthorRelation", fields: [authorId], references: [id])
  CardTag       CardTag[]
  DictionaryTag DictionaryTag[]

  @@map("tags")
}

model CardTag {
  cardId Int
  tagId  Int
  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([cardId, tagId], map: "card_tag_unique_constraint")
  @@map("card_tags")
}

model DictionaryTag {
  dictionaryId Int
  tagId        Int
  dictionary   Dictionary @relation(fields: [dictionaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([dictionaryId, tagId])
  @@map("dictionary_tags")
}
