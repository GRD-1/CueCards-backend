generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  uuid           String           @unique @default(uuid())
  email          String           @unique @db.VarChar(255)
  nickname       String           @db.VarChar
  avatar         String?          @db.VarChar
  confirmed      Boolean          @default(false)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark     Boolean          @default(false)
  credentials    Credentials?     @relation("UserRelation")
  settings       Settings?        @relation("UserRelation")
  cards          Card[]           @relation("AuthorRelation")
  dictionaries   Dictionary[]     @relation("AuthorRelation")
  tags           Tag[]            @relation("AuthorRelation")
  cardStatistics CardStatistics[] @relation("UserRelation")
  cardIsHidden   CardIsHidden[]   @relation("UserRelation")
  statistics     Statistics[]     @relation("UserRelation")

  @@map("users")
}

model Credentials {
  userId       Int      @id
  password     String   @db.VarChar
  version      Int      @default(1)
  lastPassword String   @default("") @db.VarChar
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamp(6)
  users        User     @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("credentials")
}

model Language {
  id           Int        @id() @default(autoincrement())
  name         String     @unique @db.VarChar
  acronym      String     @unique @db.VarChar
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark   Boolean    @default(false)
  fsCards      Card[]     @relation("FsLanguageRelation")
  bsCards      Card[]     @relation("BsLanguageRelation")
  appLang      Settings[] @relation("AppLanguageRelation")
  trainingLang Settings[] @relation("TrainingLanguageRelation")

  @@map("languages")
}

model Card {
  id                Int              @id @default(autoincrement())
  authorId          Int
  fsLanguage        String
  fsValue           String           @unique @db.VarChar
  fsDescription     String?          @default("") @db.VarChar
  fsMeaningVariants String[]
  fsWrongMeanings   String[]
  fsTranscription   String?          @db.VarChar
  fsSynonyms        String[]
  fsAudio           String?          @db.VarChar
  fsHint            String?          @db.VarChar
  bsLanguage        String
  bsValue           String           @unique @db.VarChar
  bsDescription     String?          @default("") @db.VarChar
  bsMeaningVariants String[]
  bsWrongMeanings   String[]
  bsTranscription   String?          @db.VarChar
  bsSynonyms        String[]
  bsAudio           String?          @db.VarChar
  bsHint            String?          @db.VarChar
  createdAt         DateTime         @default(now()) @db.Timestamp(6)
  updatedAt         DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark        Boolean          @default(false)
  users             User?            @relation("AuthorRelation", fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fsLang            Language?        @relation("FsLanguageRelation", fields: [fsLanguage], references: [acronym])
  bsLang            Language?        @relation("BsLanguageRelation", fields: [bsLanguage], references: [acronym])
  tags              CardTag[]
  statistics        CardStatistics[]
  cardIsHidden      CardIsHidden[]

  @@map("cards")
}

model Dictionary {
  id         Int             @id() @default(autoincrement())
  authorId   Int
  name       String          @unique @db.VarChar
  createdAt  DateTime        @default(now()) @db.Timestamp(6)
  updatedAt  DateTime        @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark Boolean         @default(false)
  users      User?           @relation("AuthorRelation", fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags       DictionaryTag[]
  statistics Statistics[]    @relation("DictionaryRelation")

  @@map("dictionaries")
}

model Tag {
  id            Int             @id @default(autoincrement())
  authorId      Int
  name          String          @unique @db.VarChar
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark    Boolean         @default(false)
  users         User?           @relation("AuthorRelation", fields: [authorId], references: [id])
  CardTag       CardTag[]
  DictionaryTag DictionaryTag[]

  @@map("tags")
}

model CardTag {
  cardId Int
  tagId  Int
  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([cardId, tagId], map: "card_tag_unique_constraint")
  @@map("card_tags")
}

model DictionaryTag {
  dictionaryId Int
  tagId        Int
  dictionary   Dictionary @relation(fields: [dictionaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([dictionaryId, tagId])
  @@map("dictionary_tags")
}

model CardStatistics {
  cardId           Int
  userId           Int
  fsTotalAnswers   Int
  fsCorrectAnswers Int
  bsTotalAnswers   Int
  bsCorrectAnswers Int
  card             Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users            User @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([cardId, userId], map: "card_user_unique_constraint")
  @@map("card_statistics")
}

model CardIsHidden {
  cardId Int
  userId Int
  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users  User @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([cardId, userId], map: "card_user_constraint")
  @@map("card_is_hidden")
}

model Settings {
  userId           Int      @id
  appLanguage      String   @default("ru")
  trainingLanguage String   @default("en")
  notifications    Boolean  @default(true)
  hints            Boolean  @default(true)
  voicing          Boolean  @default(true)
  darkMode         Boolean  @default(true)
  createdAt        DateTime @default(now()) @db.Timestamp(6)
  updatedAt        DateTime @default(now()) @updatedAt @db.Timestamp(6)
  users            User     @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appLang          Language @relation("AppLanguageRelation", fields: [appLanguage], references: [acronym])
  trainingLang     Language @relation("TrainingLanguageRelation", fields: [trainingLanguage], references: [acronym])

  @@map("settings")
}

model Statistics {
  id             Int        @id @default(autoincrement())
  userId         Int        @db.Integer
  dictionaryId   Int
  totalAnswers   Int
  correctAnswers Int
  trainingTime   Int
  hintsCount     Int        @default(0)
  createdAt      DateTime   @default(now()) @db.Timestamp(6)
  updatedAt      DateTime   @default(now()) @updatedAt @db.Timestamp(6)
  deleteMark     Boolean    @default(false)
  users          User       @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dictionaries   Dictionary @relation("DictionaryRelation", fields: [dictionaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, dictionaryId, createdAt])
  @@map("statistics")
}
